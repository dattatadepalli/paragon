@import "variables";
@import "~bootstrap/scss/forms";
// @import "~bootstrap/scss/input-group";
// @import "~bootstrap/scss/custom-forms";
// @import "bootstrap/scss/forms";

@import "mixins";
@import "FormText";
@import "FormControlSet";

$form-control-icon-width: 32px !default;
$select-icon-padding: .5625rem !default;


// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap; // For form validation feedback
  align-items: stretch;
  width: 100%;

  > .form-control,
  > .form-control-plaintext,
  > .custom-select,
  > .custom-file {
    position: relative; // For focus state's z-index
    flex: 1 1 auto;
    width: 1%;
    min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
    margin-bottom: 0;

    + .form-control,
    + .custom-select,
    + .custom-file {
      margin-left: -$input-border-width;
    }
  }

  // Bring the "active" form control to the top of surrounding elements
  > .form-control:focus,
  > .custom-select:focus,
  > .custom-file .custom-file-input:focus ~ .custom-file-label {
    z-index: 3;
  }

  // Bring the custom file input above the label
  > .custom-file .custom-file-input:focus {
    z-index: 4;
  }

  > .form-control,
  > .custom-select {
    &:not(:first-child) { @include border-start-radius(0); }
  }

  // Custom file inputs have more complex markup, thus requiring different
  // border-radius overrides.
  > .custom-file {
    display: flex;
    align-items: center;

    &:not(:last-child) .custom-file-label,
    &:not(:last-child) .custom-file-label::after { @include border-end-radius(0); }
    &:not(:first-child) .custom-file-label { @include border-start-radius(0); }
  }

  &:not(.has-validation) {
    > .form-control:not(:last-child),
    > .custom-select:not(:last-child),
    > .custom-file:not(:last-child) .custom-file-label,
    > .custom-file:not(:last-child) .custom-file-label::after {
      @include border-end-radius(0);
    }
  }

  &.has-validation {
    > .form-control:nth-last-child(n + 3),
    > .custom-select:nth-last-child(n + 3),
    > .custom-file:nth-last-child(n + 3) .custom-file-label,
    > .custom-file:nth-last-child(n + 3) .custom-file-label::after {
      @include border-end-radius(0);
    }
  }
}


// Prepend and append
//
// While it requires one extra layer of HTML for each, dedicated prepend and
// append elements allow us to 1) be less clever, 2) simplify our selectors, and
// 3) support HTML5 form validation.

.input-group-prepend,
.input-group-append {
  display: flex;

  // Ensure buttons are always above inputs for more visually pleasing borders.
  // This isn't needed for `.input-group-text` since it shares the same border-color
  // as our inputs.
  .btn {
    position: relative;
    z-index: 2;

    &:focus {
      z-index: 3;
    }
  }

  .btn + .btn,
  .btn + .input-group-text,
  .input-group-text + .input-group-text,
  .input-group-text + .btn {
    margin-left: -$input-border-width;
  }
}

.input-group-prepend { margin-right: -$input-border-width; }
.input-group-append { margin-left: -$input-border-width; }


// Textual addons
//
// Serves as a catch-all element for any text or radio/checkbox input you wish
// to prepend or append to an input.

.input-group-text {
  display: flex;
  align-items: center;
  padding: $input-padding-y $input-padding-x;
  margin-bottom: 0; // Allow use of <label> elements by overriding our default margin-bottom
  @include font-size($input-font-size); // Match inputs
  font-weight: $font-weight-normal;
  line-height: $input-line-height;
  color: $input-group-addon-color;
  text-align: center;
  white-space: nowrap;
  background-color: $input-group-addon-bg;
  border: $input-border-width solid $input-group-addon-border-color;
  @include border-radius($input-border-radius);

  // Nuke default margins from checkboxes and radios to vertically center within.
  input[type="radio"],
  input[type="checkbox"] {
    margin-top: 0;
  }
}


// Sizing
//
// Remix the default form control sizing classes into new ones for easier
// manipulation.

.input-group-lg > .form-control:not(textarea),
.input-group-lg > .custom-select {
  height: $input-height-lg;
}

.input-group-lg > .form-control,
.input-group-lg > .custom-select,
.input-group-lg > .input-group-prepend > .input-group-text,
.input-group-lg > .input-group-append > .input-group-text,
.input-group-lg > .input-group-prepend > .btn,
.input-group-lg > .input-group-append > .btn {
  padding: $input-padding-y-lg $input-padding-x-lg;
  @include font-size($input-font-size-lg);
  line-height: $input-line-height-lg;
  @include border-radius($input-border-radius-lg);
}

.input-group-sm > .form-control:not(textarea),
.input-group-sm > .custom-select {
  height: $input-height-sm;
}

.input-group-sm > .form-control,
.input-group-sm > .custom-select,
.input-group-sm > .input-group-prepend > .input-group-text,
.input-group-sm > .input-group-append > .input-group-text,
.input-group-sm > .input-group-prepend > .btn,
.input-group-sm > .input-group-append > .btn {
  padding: $input-padding-y-sm $input-padding-x-sm;
  @include font-size($input-font-size-sm);
  line-height: $input-line-height-sm;
  @include border-radius($input-border-radius-sm);
}

.input-group-lg > .custom-select,
.input-group-sm > .custom-select {
  padding-right: $custom-select-padding-x + $custom-select-indicator-padding;
}


// Prepend and append rounded corners
//
// These rulesets must come after the sizing ones to properly override sm and lg
// border-radius values when extending. They're more specific than we'd like
// with the `.input-group >` part, but without it, we cannot override the sizing.


.input-group > .input-group-prepend > .btn,
.input-group > .input-group-prepend > .input-group-text,
.input-group:not(.has-validation) > .input-group-append:not(:last-child) > .btn,
.input-group:not(.has-validation) > .input-group-append:not(:last-child) > .input-group-text,
.input-group.has-validation > .input-group-append:nth-last-child(n + 3) > .btn,
.input-group.has-validation > .input-group-append:nth-last-child(n + 3) > .input-group-text,
.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),
.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {
  @include border-end-radius(0);
}

.input-group > .input-group-append > .btn,
.input-group > .input-group-append > .input-group-text,
.input-group > .input-group-prepend:not(:first-child) > .btn,
.input-group > .input-group-prepend:not(:first-child) > .input-group-text,
.input-group > .input-group-prepend:first-child > .btn:not(:first-child),
.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {
  @include border-start-radius(0);
}
// Embedded icons from Open Iconic.
// Released under MIT and copyright 2014 Waybury.
// https://useiconic.com/open


// Checkboxes and radios
//
// Base class takes care of all the key behavioral aspects.

.custom-control {
  position: relative;
  z-index: 1;
  display: block;
  min-height: $font-size-base * $line-height-base;
  padding-left: $custom-control-gutter + $custom-control-indicator-size;
  print-color-adjust: exact; // Keep themed appearance for print
}

.custom-control-inline {
  display: inline-flex;
  margin-right: $custom-control-spacer-x;
}

.custom-control-input {
  position: absolute;
  left: 0;
  z-index: -1; // Put the input behind the label so it doesn't overlay text
  width: $custom-control-indicator-size;
  height: ($font-size-base * $line-height-base + $custom-control-indicator-size) * .5;
  opacity: 0;

  &:checked ~ .custom-control-label::before {
    color: $custom-control-indicator-checked-color;
    border-color: $custom-control-indicator-checked-border-color;
    @include gradient-bg($custom-control-indicator-checked-bg);
    @include box-shadow($custom-control-indicator-checked-box-shadow);
  }

  &:focus ~ .custom-control-label::before {
    // the mixin is not used here to make sure there is feedback
    @if $enable-shadows {
      box-shadow: $input-box-shadow, $custom-control-indicator-focus-box-shadow;
    } @else {
      box-shadow: $custom-control-indicator-focus-box-shadow;
    }
  }

  &:focus:not(:checked) ~ .custom-control-label::before {
    border-color: $custom-control-indicator-focus-border-color;
  }

  &:not(:disabled):active ~ .custom-control-label::before {
    color: $custom-control-indicator-active-color;
    background-color: $custom-control-indicator-active-bg;
    border-color: $custom-control-indicator-active-border-color;
    @include box-shadow($custom-control-indicator-active-box-shadow);
  }

  // Use [disabled] and :disabled to work around https://github.com/twbs/bootstrap/issues/28247
  &[disabled],
  &:disabled {
    ~ .custom-control-label {
      color: $custom-control-label-disabled-color;

      &::before {
        background-color: $custom-control-indicator-disabled-bg;
      }
    }
  }
}

// Custom control indicators
//
// Build the custom controls out of pseudo-elements.

.custom-control-label {
  position: relative;
  margin-bottom: 0;
  color: $custom-control-label-color;
  vertical-align: top;
  cursor: $custom-control-cursor;

  // Background-color and (when enabled) gradient
  &::before {
    position: absolute;
    top: ($font-size-base * $line-height-base - $custom-control-indicator-size) * .5;
    left: -($custom-control-gutter + $custom-control-indicator-size);
    display: block;
    width: $custom-control-indicator-size;
    height: $custom-control-indicator-size;
    pointer-events: none;
    content: "";
    background-color: $custom-control-indicator-bg;
    border: $custom-control-indicator-border-width solid $custom-control-indicator-border-color;
    @include box-shadow($custom-control-indicator-box-shadow);
  }

  // Foreground (icon)
  &::after {
    position: absolute;
    top: ($font-size-base * $line-height-base - $custom-control-indicator-size) * .5;
    left: -($custom-control-gutter + $custom-control-indicator-size);
    display: block;
    width: $custom-control-indicator-size;
    height: $custom-control-indicator-size;
    content: "";
    background: 50% / #{$custom-control-indicator-bg-size} no-repeat;
  }
}


// Checkboxes
//
// Tweak just a few things for checkboxes.

.custom-checkbox {
  .custom-control-label::before {
    @include border-radius($custom-checkbox-indicator-border-radius);
  }

  .custom-control-input:checked ~ .custom-control-label {
    &::after {
      background-image: escape-svg($custom-checkbox-indicator-icon-checked);
    }
  }

  .custom-control-input:indeterminate ~ .custom-control-label {
    &::before {
      border-color: $custom-checkbox-indicator-indeterminate-border-color;
      @include gradient-bg($custom-checkbox-indicator-indeterminate-bg);
      @include box-shadow($custom-checkbox-indicator-indeterminate-box-shadow);
    }
    &::after {
      background-image: escape-svg($custom-checkbox-indicator-icon-indeterminate);
    }
  }

  .custom-control-input:disabled {
    &:checked ~ .custom-control-label::before {
      @include gradient-bg($custom-control-indicator-checked-disabled-bg);
    }
    &:indeterminate ~ .custom-control-label::before {
      @include gradient-bg($custom-control-indicator-checked-disabled-bg);
    }
  }
}

// Radios
//
// Tweak just a few things for radios.

.custom-radio {
  .custom-control-label::before {
    // stylelint-disable-next-line property-disallowed-list
    border-radius: $custom-radio-indicator-border-radius;
  }

  .custom-control-input:checked ~ .custom-control-label {
    &::after {
      background-image: escape-svg($custom-radio-indicator-icon-checked);
    }
  }

  .custom-control-input:disabled {
    &:checked ~ .custom-control-label::before {
      @include gradient-bg($custom-control-indicator-checked-disabled-bg);
    }
  }
}


// switches
//
// Tweak a few things for switches

.custom-switch {
  padding-left: $custom-switch-width + $custom-control-gutter;

  .custom-control-label {
    &::before {
      left: -($custom-switch-width + $custom-control-gutter);
      width: $custom-switch-width;
      pointer-events: all;
      // stylelint-disable-next-line property-disallowed-list
      border-radius: $custom-switch-indicator-border-radius;
    }

    &::after {
      top: add(($font-size-base * $line-height-base - $custom-control-indicator-size) * .5, $custom-control-indicator-border-width * 2);
      left: add(-($custom-switch-width + $custom-control-gutter), $custom-control-indicator-border-width * 2);
      width: $custom-switch-indicator-size;
      height: $custom-switch-indicator-size;
      background-color: $custom-control-indicator-border-color;
      // stylelint-disable-next-line property-disallowed-list
      border-radius: $custom-switch-indicator-border-radius;
      @include transition(transform .15s ease-in-out, $custom-forms-transition);
    }
  }

  .custom-control-input:checked ~ .custom-control-label {
    &::after {
      background-color: $custom-control-indicator-bg;
      transform: translateX($custom-switch-width - $custom-control-indicator-size);
    }
  }

  .custom-control-input:disabled {
    &:checked ~ .custom-control-label::before {
      @include gradient-bg($custom-control-indicator-checked-disabled-bg);
    }
  }
}


// Select
//
// Replaces the browser default select with a custom one, mostly pulled from
// https://primer.github.io/.
//

.custom-select {
  display: inline-block;
  width: 100%;
  height: $custom-select-height;
  padding: $custom-select-padding-y ($custom-select-padding-x + $custom-select-indicator-padding) $custom-select-padding-y $custom-select-padding-x;
  font-family: $custom-select-font-family;
  @include font-size($custom-select-font-size);
  font-weight: $custom-select-font-weight;
  line-height: $custom-select-line-height;
  color: $custom-select-color;
  vertical-align: middle;
  background: $custom-select-bg $custom-select-background;
  border: $custom-select-border-width solid $custom-select-border-color;
  @include border-radius($custom-select-border-radius, 0);
  @include box-shadow($custom-select-box-shadow);
  appearance: none;

  &:focus {
    border-color: $custom-select-focus-border-color;
    outline: 0;
    @if $enable-shadows {
      @include box-shadow($custom-select-box-shadow, $custom-select-focus-box-shadow);
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: $custom-select-focus-box-shadow;
    }

    &::-ms-value {
      // For visual consistency with other platforms/browsers,
      // suppress the default white text on blue background highlight given to
      // the selected option text when the (still closed) <select> receives focus
      // in IE and (under certain conditions) Edge.
      // See https://github.com/twbs/bootstrap/issues/19398.
      color: $input-color;
      background-color: $input-bg;
    }
  }

  &[multiple],
  &[size]:not([size="1"]) {
    height: auto;
    padding-right: $custom-select-padding-x;
    background-image: none;
  }

  &:disabled {
    color: $custom-select-disabled-color;
    background-color: $custom-select-disabled-bg;
  }

  // Hides the default caret in IE11
  &::-ms-expand {
    display: none;
  }

  // Remove outline from select box in FF
  &:-moz-focusring {
    color: transparent;
    text-shadow: 0 0 0 $custom-select-color;
  }
}

.custom-select-sm {
  height: $custom-select-height-sm;
  padding-top: $custom-select-padding-y-sm;
  padding-bottom: $custom-select-padding-y-sm;
  padding-left: $custom-select-padding-x-sm;
  @include font-size($custom-select-font-size-sm);
}

.custom-select-lg {
  height: $custom-select-height-lg;
  padding-top: $custom-select-padding-y-lg;
  padding-bottom: $custom-select-padding-y-lg;
  padding-left: $custom-select-padding-x-lg;
  @include font-size($custom-select-font-size-lg);
}


// File
//
// Custom file input.

.custom-file {
  position: relative;
  display: inline-block;
  width: 100%;
  height: $custom-file-height;
  margin-bottom: 0;
}

.custom-file-input {
  position: relative;
  z-index: 2;
  width: 100%;
  height: $custom-file-height;
  margin: 0;
  overflow: hidden;
  opacity: 0;

  &:focus ~ .custom-file-label {
    border-color: $custom-file-focus-border-color;
    box-shadow: $custom-file-focus-box-shadow;
  }

  // Use [disabled] and :disabled to work around https://github.com/twbs/bootstrap/issues/28247
  &[disabled] ~ .custom-file-label,
  &:disabled ~ .custom-file-label {
    background-color: $custom-file-disabled-bg;
  }

  @each $lang, $value in $custom-file-text {
    &:lang(#{$lang}) ~ .custom-file-label::after {
      content: $value;
    }
  }

  ~ .custom-file-label[data-browse]::after {
    content: attr(data-browse);
  }
}

.custom-file-label {
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  z-index: 1;
  height: $custom-file-height;
  padding: $custom-file-padding-y $custom-file-padding-x;
  overflow: hidden;
  font-family: $custom-file-font-family;
  font-weight: $custom-file-font-weight;
  line-height: $custom-file-line-height;
  color: $custom-file-color;
  background-color: $custom-file-bg;
  border: $custom-file-border-width solid $custom-file-border-color;
  @include border-radius($custom-file-border-radius);
  @include box-shadow($custom-file-box-shadow);

  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    z-index: 3;
    display: block;
    height: $custom-file-height-inner;
    padding: $custom-file-padding-y $custom-file-padding-x;
    line-height: $custom-file-line-height;
    color: $custom-file-button-color;
    content: "Browse";
    @include gradient-bg($custom-file-button-bg);
    border-left: inherit;
    @include border-radius(0 $custom-file-border-radius $custom-file-border-radius 0);
  }
}

// Range
//
// Style range inputs the same across browsers. Vendor-specific rules for pseudo
// elements cannot be mixed. As such, there are no shared styles for focus or
// active states on prefixed selectors.

.custom-range {
  width: 100%;
  height: add($custom-range-thumb-height, $custom-range-thumb-focus-box-shadow-width * 2);
  padding: 0; // Need to reset padding
  background-color: transparent;
  appearance: none;

  &:focus {
    outline: 0;

    // Pseudo-elements must be split across multiple rulesets to have an effect.
    // No box-shadow() mixin for focus accessibility.
    &::-webkit-slider-thumb { box-shadow: $custom-range-thumb-focus-box-shadow; }
    &::-moz-range-thumb     { box-shadow: $custom-range-thumb-focus-box-shadow; }
    &::-ms-thumb            { box-shadow: $custom-range-thumb-focus-box-shadow; }
  }

  &::-moz-focus-outer {
    border: 0;
  }

  &::-webkit-slider-thumb {
    width: $custom-range-thumb-width;
    height: $custom-range-thumb-height;
    margin-top: ($custom-range-track-height - $custom-range-thumb-height) * .5; // Webkit specific
    @include gradient-bg($custom-range-thumb-bg);
    border: $custom-range-thumb-border;
    @include border-radius($custom-range-thumb-border-radius);
    @include box-shadow($custom-range-thumb-box-shadow);
    @include transition($custom-forms-transition);
    appearance: none;

    &:active {
      @include gradient-bg($custom-range-thumb-active-bg);
    }
  }

  &::-webkit-slider-runnable-track {
    width: $custom-range-track-width;
    height: $custom-range-track-height;
    color: transparent; // Why?
    cursor: $custom-range-track-cursor;
    background-color: $custom-range-track-bg;
    border-color: transparent;
    @include border-radius($custom-range-track-border-radius);
    @include box-shadow($custom-range-track-box-shadow);
  }

  &::-moz-range-thumb {
    width: $custom-range-thumb-width;
    height: $custom-range-thumb-height;
    @include gradient-bg($custom-range-thumb-bg);
    border: $custom-range-thumb-border;
    @include border-radius($custom-range-thumb-border-radius);
    @include box-shadow($custom-range-thumb-box-shadow);
    @include transition($custom-forms-transition);
    appearance: none;

    &:active {
      @include gradient-bg($custom-range-thumb-active-bg);
    }
  }

  &::-moz-range-track {
    width: $custom-range-track-width;
    height: $custom-range-track-height;
    color: transparent;
    cursor: $custom-range-track-cursor;
    background-color: $custom-range-track-bg;
    border-color: transparent; // Firefox specific?
    @include border-radius($custom-range-track-border-radius);
    @include box-shadow($custom-range-track-box-shadow);
  }

  &::-ms-thumb {
    width: $custom-range-thumb-width;
    height: $custom-range-thumb-height;
    margin-top: 0; // Edge specific
    margin-right: $custom-range-thumb-focus-box-shadow-width; // Workaround that overflowed box-shadow is hidden.
    margin-left: $custom-range-thumb-focus-box-shadow-width;  // Workaround that overflowed box-shadow is hidden.
    @include gradient-bg($custom-range-thumb-bg);
    border: $custom-range-thumb-border;
    @include border-radius($custom-range-thumb-border-radius);
    @include box-shadow($custom-range-thumb-box-shadow);
    @include transition($custom-forms-transition);
    appearance: none;

    &:active {
      @include gradient-bg($custom-range-thumb-active-bg);
    }
  }

  &::-ms-track {
    width: $custom-range-track-width;
    height: $custom-range-track-height;
    color: transparent;
    cursor: $custom-range-track-cursor;
    background-color: transparent;
    border-color: transparent;
    border-width: $custom-range-thumb-height * .5;
    @include box-shadow($custom-range-track-box-shadow);
  }

  &::-ms-fill-lower {
    background-color: $custom-range-track-bg;
    @include border-radius($custom-range-track-border-radius);
  }

  &::-ms-fill-upper {
    margin-right: 15px; // arbitrary?
    background-color: $custom-range-track-bg;
    @include border-radius($custom-range-track-border-radius);
  }

  &:disabled {
    &::-webkit-slider-thumb {
      background-color: $custom-range-thumb-disabled-bg;
    }

    &::-webkit-slider-runnable-track {
      cursor: default;
    }

    &::-moz-range-thumb {
      background-color: $custom-range-thumb-disabled-bg;
    }

    &::-moz-range-track {
      cursor: default;
    }

    &::-ms-thumb {
      background-color: $custom-range-thumb-disabled-bg;
    }
  }
}

.custom-control-label::before,
.custom-file-label,
.custom-select {
  @include transition($custom-forms-transition);
}
// A form input state used by the now deprecate Fieldset and asInput
// we can remove this when they are deleted.
.form-control.is-invalid.is-invalid-nodanger {
  // @include form-control-focus(true);
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    box-shadow: $input-focus-box-shadow;
  }
  

  border-color: $input-border-color;
}

.form-control:hover {
  border: solid $input-hover-width $dark-700;
}

.pgn__form-group {
  margin-bottom: $form-group-margin-bottom;
  text-align: start;

  .form-check {
    [dir="rtl"] & {
      padding-left: 0;
      padding-right: 1.25rem;
    }

    [dir="rtl"] & .form-check-input {
      margin-left: 0;
      margin-right: -1.25rem;
    }
  }
}

// FormControlDecoratorGroup

.pgn__form-control-decorator-group {
  position: relative;
  display: flex;
  flex-grow: 1;
  align-items: flex-start;

  @media (min-width: map-get($grid-breakpoints, "sm")) {
    margin-inline-end: $custom-control-gutter;
  }

  &.has-prepended-node {
    .form-control {
      padding-inline-start: calc(#{$input-padding-x} + #{$form-control-icon-width});

      [dir="rtl"] & {
        background-position: left $select-icon-padding center;
      }
    }

    .form-control-lg {
      padding-inline-start: calc(#{$input-padding-x-lg} + #{$form-control-icon-width});
    }

    .form-control-sm {
      padding-inline-start: calc(#{$input-padding-x-sm} + #{$form-control-icon-width});
    }
  }

  &.has-appended-node {
    .form-control {
      padding-inline-end: calc(#{$input-padding-x} + #{$form-control-icon-width});
    }

    .form-control-lg {
      padding-inline-end: calc(#{$input-padding-x-lg} + #{$form-control-icon-width});
    }

    .form-control-sm {
      padding-inline-end: calc(#{$input-padding-x-sm} + #{$form-control-icon-width});
    }
  }

  font-size: $input-font-size;
  line-height: $input-line-height;

  &.pgn__form-control-decorator-group-sm {
    font-size: $input-font-size-sm;
    line-height: $input-line-height-sm;
  }

  &.pgn__form-control-decorator-group-lg {
    font-size: $input-font-size-lg;
    line-height: $input-line-height-lg;
  }
}

// Control Decorators

.pgn__form-control-decorator {
  position: absolute;
  pointer-events: none;

  button {
    pointer-events: initial;
  }

  height: $input-height;
  min-width: $input-height;
  line-height: inherit;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: inherit;

  &.pgn__form-control-decorator-leading {
    inset-inline-start: 0;
    padding-inline-start: $input-padding-x;
    padding-inline-end: calc($input-padding-x / 2);
  }

  &.pgn__form-control-decorator-trailing {
    inset-inline-end: 0;
    padding-inline-start: calc($input-padding-x / 2);
    // padding-inline-end: calc(#{$input-padding-y-sm} - #{2 * var(--bs-border-width)});
    padding-inline-end: calc(#{$input-padding-y-sm} - 2 * var(--bs-border-width));

  }

  .pgn__form-control-decorator-group-lg & {
    height: $input-height-lg;
    min-width: $input-height-lg;

    &.pgn__form-control-decorator-leading {
      padding-left: $input-padding-x-lg;
      padding-right: calc($input-padding-x-lg / 2);
    }

    &.pgn__form-control-decorator-trailing {
      padding-left: calc($input-padding-x-lg / 2);
      padding-right: calc(#{$input-padding-y} - 2 * var(--bs-border-width));
    }
  }

  .pgn__form-control-decorator-group-sm & {
    height: $input-height-sm;
    min-width: $input-height-lg;

    &.pgn__form-control-decorator-leading {
      padding-left: $input-padding-x-sm;
      padding-right: calc($input-padding-x-sm / 2);
    }

    &.pgn__form-control-decorator-trailing {
      padding-left: calc($input-padding-x-sm / 2);
      padding-right: calc(#{$input-padding-y-sm} - 2 * var(--bs-border-width));
    }
  }

  .btn-icon {
    color: $gray-500 !important;

    &:hover {
      background-color: $gray-500 !important;
      color: $white !important;
    }

    &:focus {
      background-color: $white !important;
      color: $gray-500 !important;
      box-shadow: inset 0 0 0 2px $gray-500 !important;
    }
  }
}

// Floating Labels

.pgn__form-control-floating-label {
  position: absolute;
  inset-inline-start: $input-border-width;
  inset-inline-end: 0;
  display: flex;
  width: 100%;
  height: 100%;
  pointer-events: none;

  .pgn__form-control-floating-label-content {
    border-top: solid 2px transparent;
    position: relative;
    inset-inline-start: -.5em;
    max-width: 100%;
  }

  .pgn__form-control-floating-label-text {
    transform-origin: left top;
    padding: 0 .5em;
    transition: transform 150ms ease, background-color 150ms linear;

    // Prevent background-color from being output as "transparent"
    // Firefox doesn't handle the first animation well from transparent to
    // a color. Adding an alpha channel smooths it out.
    background-color: rgba($input-bg, .01);
    white-space: nowrap;
    max-width: 75vw;
    display: block;
    overflow: hidden;
    text-overflow: ellipsis;

    [dir="rtl"] & {
      transform-origin: right top;
    }
  }

  .has-leading-element & {
    .pgn__form-control-floating-label-text {
      transform: translateX(#{$form-control-icon-width});

      [dir="rtl"] & {
        transform: translateX(#{-$form-control-icon-width});
      }
    }
  }

  @include form-control-floating-label-initial(
    $input-padding-x,
    $input-padding-y,
    $input-line-height,
    $input-font-size,
    $input-border-width
  );

  .pgn__form-control-decorator-group-lg & {
    @include form-control-floating-label-initial(
      $input-padding-x-lg,
      $input-padding-y-lg,
      $input-line-height-lg,
      $input-font-size-lg,
      $input-border-width
    );
  }

  .pgn__form-control-decorator-group-sm & {
    @include form-control-floating-label-initial(
      $input-padding-x-sm,
      $input-padding-y-sm,
      $input-line-height-sm,
      $input-font-size-sm,
      $input-border-width
    );
  }

  .form-control:focus ~ &,
  // select.form-control ~ &,
  .form-control.has-value ~ & {
    .pgn__form-control-floating-label-text {
      background-color: $input-bg;
    }

    @include form-control-floating-label-float(
      $input-padding-x,
      $input-padding-y,
      $input-line-height,
      $input-font-size,
      $input-border-width
    );
  }

  .float-label.pgn__form-control-decorator-group-lg & {
    @include form-control-floating-label-float(
      $input-padding-x-lg,
      $input-padding-y-lg,
      $input-line-height-lg,
      $input-font-size-lg,
      $input-border-width
    );
  }

  .float-label.pgn__form-control-decorator-group-sm & {
    @include form-control-floating-label-float(
      $input-padding-x-sm,
      $input-padding-y-sm,
      $input-line-height-sm,
      $input-font-size-sm,
      $input-border-width
    );
  }
}

.pgn__form-control-decorator-group.has-floating-label {
  input[type="date"],
  input[type="time"] {
    [dir="rtl"] & {
      text-align: right;
    }

    &:not(:focus):not(.has-value) {
      color: transparent;
    }

    &::-webkit-calendar-picker-indicator {
      [dir="rtl"] & {
        position: absolute;
        left: 0;
      }
    }
  }

  .form-control:not(:focus):not(.has-value) {
    &::placeholder,
    &::-webkit-datetime-edit {
      opacity: 0;
    }
  }

  select.form-control:not(.has-value):not(:focus) {
    // color: rgba(0,0,0,0); Force the rgba syntax to appear in the output rather
    // than transparent. IE11 does not understand color: transparent here.
    color: unquote("rgba(0,0,0,0)");
  }
}

select.form-control {
  padding-inline-end: 2rem + $select-icon-padding;
  background-image: $custom-select-indicator;
  background-position: right $select-icon-padding center;
  background-repeat: no-repeat;
  background-size: 24px 24px;
  appearance: none;

  [dir="rtl"] & {
    background-position: left $select-icon-padding center;
  }
}

// Regular Form Label

.pgn__form-label {
  font-size: $input-font-size;
  display: inline-block;
  margin-bottom: .5rem;

  &.pgn__form-label-inline {
    display: inline-block;
    margin: 0 1em 0 0;

    [dir="rtl"] & {
      margin: 0 0 0 1em;
    }
  }

  &.pgn__form-label-lg {
    font-size: $input-font-size-lg;
  }

  &.pgn__form-label-sm {
    font-size: $input-font-size-sm;
  }
}

// Checkbox, Radio, Switch

.pgn__form-checkbox-input,
.pgn__form-radio-input,
.pgn__form-switch-input {
  appearance: none;
  height: $custom-control-indicator-size;
  width: $custom-control-indicator-size;
  background-color: $custom-control-indicator-bg;
  border: solid $custom-control-indicator-border-width $custom-control-indicator-border-color;
  border-radius: $custom-checkbox-indicator-border-radius;
  margin-inline-end: $custom-control-gutter;
  background-position: center;

  &:not(:disabled) {
    cursor: pointer;
  }

  &:not(:disabled):hover {
    box-shadow: $custom-control-indicator-focus-box-shadow;
  }

  &:disabled {
    opacity: .3;
  }

  &:checked {
    border-color: $custom-control-indicator-checked-border-color;
  }
}

.pgn__form-checkbox-input {
  &:checked {
    background-image: escape-svg($custom-checkbox-indicator-icon-checked);
  }

  &:indeterminate {
    background-image: escape-svg($custom-checkbox-indicator-icon-indeterminate);
  }
}

.pgn__form-checkbox-input,
.pgn__form-radio-input {
  &:focus {
    position: relative;
    outline: none;
    box-shadow: none;
    text-decoration: none;
    border-color: $input-focus-border-color;
  }

  &:focus::before {
    content: "";
    position: absolute;
    top: -$form-check-position-axis;
    right: -$form-check-position-axis;
    bottom: -$form-check-position-axis;
    left: -$form-check-position-axis;
    border: $form-check-border-width solid $input-focus-border-color;
    border-radius: $form-check-focus-border-radius;
  }
}

.pgn__form-switch-input {
  width: $custom-switch-width;
  border-radius: $custom-switch-indicator-border-radius;
  background-image: escape-svg($custom-switch-indicator-icon-off);
  background-position: left center;
  background-repeat: no-repeat;
  transition: background 150ms ease;

  &:checked {
    background-position: right center;
    background-color: $custom-switch-indicator-checked-bg;
    background-image: escape-svg($custom-switch-indicator-icon-on);
  }

  &:indeterminate {
    background-position: center;
    background-image: escape-svg($custom-switch-indicator-icon-off);
  }
}

.pgn__form-switch-helper-text {
  color: $gray-500;
  font-size: $font-size-xs;
  margin-top: .25rem;
}

.pgn__form-radio-input {
  border-radius: $custom-radio-indicator-border-radius;

  &:checked {
    background-image: escape-svg($custom-radio-indicator-icon-checked);
  }

  &:focus {
    border-color: $black;

    &::before {
      border-radius: $custom-radio-indicator-border-radius;
    }
  }
}

.pgn__form-checkbox,
.pgn__form-switch,
.pgn__form-radio {
  display: inline-flex;

  .pgn__form-label {
    display: flex;
    align-items: center;
    margin-bottom: 0;
    line-height: $custom-control-indicator-size;
  }

  input:disabled ~ * {
    opacity: .3;
  }

  &.pgn__form-control-invalid input {
    border-color: $form-feedback-invalid-color;
  }

  &.pgn__form-control-valid input {
    border-color: $form-feedback-valid-color;
  }

  &.pgn__form-control-label-left {
    .pgn__form-label {
      order: 1;
      margin-inline-end: $custom-control-gutter;
    }

    input {
      order: 2;
    }
  }
}

.pgn__form-checkbox {
  &.pgn__form-control-invalid input {
    &:checked {
      background-image: escape-svg($custom-checkbox-indicator-icon-invalid-checked);
    }
  }

  &.pgn__form-control-valid input {
    &:checked {
      background-image: escape-svg($custom-checkbox-indicator-icon-valid-checked);
    }
  }
}

.pgn__form-radio {
  &.pgn__form-control-invalid input {
    &:checked {
      background-image: escape-svg($custom-radio-indicator-icon-invalid-checked);
    }
  }

  &.pgn__form-control-valid input {
    &:checked {
      background-image: escape-svg($custom-radio-indicator-icon-valid-checked);
    }
  }
}

.input-group > .input-group-prepend > .btn,
.input-group > .input-group-prepend > .input-group-text,
.input-group:not(.has-validation) > .input-group-append:not(:last-child) > .btn,
.input-group:not(.has-validation) > .input-group-append:not(:last-child) > .input-group-text,
.input-group.has-validation > .input-group-append:nth-last-child(n+3) > .btn,
.input-group.has-validation > .input-group-append:nth-last-child(n+3) > .input-group-text,
.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),
.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {
  [dir="rtl"] & {
    border-radius: 0 $input-border-radius $input-border-radius 0;
  }
}

.input-group > .input-group-append > .btn,
.input-group > .input-group-append > .input-group-text,
.input-group > .input-group-prepend:not(:first-child) > .btn,
.input-group > .input-group-prepend:not(:first-child) > .input-group-text,
.input-group > .input-group-prepend:first-child > .btn:not(:first-child),
.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {
  [dir="rtl"] & {
    border-radius: $input-border-radius 0 0 $input-border-radius;
  }
}

.pgn__form-autosuggest__wrapper {
  position: relative;

  .pgn__form-control-decorator .btn-icon {
    &:hover {
      fill: $white;
    }

    &:focus {
      fill: $gray-500;
    }
  }

  .form-control {
    min-height: 2.75rem;
  }

  .pgn__icon.btn-icon__icon {
    height: $form-autosuggest-icon-height;
    width: $form-autosuggest-icon-width;
  }

  .pgn__form-autosuggest__dropdown {
    @include pgn-box-shadow(1, "centered");

    @media (min-width: map-get($grid-breakpoints, "sm")) {
      margin-inline-end: $custom-control-gutter;
    }

    border-radius: $border-radius-sm;
    max-height: 15rem;
    overflow-y: scroll;
    position: absolute;
    background-color: $white;
    width: calc(100% - .5rem);
    z-index: $zindex-dropdown;
    top: 3.125rem;

    .dropdown-item {
      display: block;
      text-align: start;
      max-width: 100%;
      padding: .625rem 1rem;
      overflow: hidden;
      text-overflow: ellipsis;

      &:active {
        color: $white;
      }
    }

    .pgn__form-autosuggest__dropdown-loading {
      padding: 6.25rem 0;
      text-align: center;

      .spinner-border {
        width: $form-autosuggest-spinner-width;
        height: $form-autosuggest-spinner-height;
        border: $form-autosuggest-border-width solid $black;
        border-right-color: transparent;
      }
    }
  }
}
